%Name: Hossein Rejali
%Supervisor: Dr. Ali Khan
%Date: May 27th,2018
%Title: Merge list of streams based on the GM start points
function [streams]= MergeStream(streams1,streams2,seg)
%% ............................Description................................
%MergeStream(streams1,streams2)
% Merges streamline lists into 1 list based on the GM start points.:
% This function segmented image in order to extract requires an inital start point, 
% and ignore points

% Assumes the segmented image has following labels: GM==1, WM==2,
% Background==3, and Ignore mask==4 

%Inputs:
% 1) <streams1>: streamlines from the Grey-WM boundary extraction
% 2) <streams2>: streamlines from the Grey-CSF boundary extraction
% 3) <Seg>: Segmented image: (GM==1,WM==2,Background==3,Ignore maske==4)

%Outputs:
% 1) <streams>: Merged streams sorted based on the GM start points.
%% ........................ Boundary Extraction .........................
se = strel('sphere',1);
edgesGB = imdilate(seg==3,se) & seg==1;
edgesIgnore = (imdilate(seg==4,se) & seg==1);

[GMStartpts(:,1), GMStartpts(:,2)]=ind2sub(size(edgesGB),find(edgesGB==1));
[IgnoreStartpts(:,1), IgnoreStartpts(:,2)]=ind2sub(size(edgesIgnore),find(edgesIgnore==1));

%% ....................... Sort Boundary Points ..........................
[GMStartpts, ~,IgnoreMask]=SortSeedSub(seg); % sorts the boundary subscripts
GMStartpts(:,[1 2])=GMStartpts(:,[2 1]); %Note orders are swaped from streamline orders
%% ................... Reverse Order for Streamline ......................
sz1=size(streams1);

for i=1:sz1(2)
    temp=streams1{1,i}';
    temp=fliplr(temp)'; % flip the order
    streams1{1,i}=temp;
    
end


%% ......................... MERGE DATA ..................................
%Note to delete cell must use () instead {}
index=1;% keeps track of the index of new list
szGM=size(GMStartpts);

for i=1:szGM(1)-1
    s1=streams1{1};% always pick the first stream
    deleteIndex=[];% stores the index of streams1 that should be deleted
    
    
    if( ~IgnoreMask(i) )% Ignore Point, delete invalid streams
        %check if 8-connected neighbourhood of initial stream point
        %correponds to ignore point
        szStream1=size(streams1);
        for j=1:szStream1(2)
            s1=streams1{j};
            if( Connectivity8(round(s1(1,:)),GMStartpts(i,:)) || Connectivity8(round(s1(2,:)),GMStartpts(i,:)))
                deleteIndex=[deleteIndex,j];
            end
        end
        streams1(deleteIndex)=[];
        
    elseif(~isempty(streams2)) %Valid Start Point, add points to new list
        streams(index)=streams2(1);
        streams2(1)=[];
        index=index+1;
        while( isRange( GMStartpts(i,:),GMStartpts(i+1,:),s1(1,:) ))
            streams(index)=streams1(1);
            streams1(1)=[];
             s1=streams1{1};
            index=index+1;
        end
        try
        streams(index)=streams2(1);
        
        streams2(1)=[];
        index=index+1;
    end
    
    
end





end